7.1 Именование булевых переменных:

	flag - is_full
	// когда горшочек заполняется золотом полностью, переменная принимает значение True
	
	max - is_max_speed
	// когда скорость достигает значения максимальной, переменная принимает значение True
	
	stop - is_full_seat
	// когда посадочные места полностью заполнены, переменная принимает значение True
	
	parol - is_succes
	// когда пароль успешно введен, переменная принимает значение True
	
	not_value - is_error
	// когда введен логин, который отсутствует в словаре, переменная принимает значение True
	
7.2 Типичные имена булевых переменных:
	
	done - применимо в случаях, когда, к примеру, завершена операция перебора всех элементов, содержащихся в списке;
	
	found - применимо в случаях, когда среди имен, содержащихся в словаре, найдено требуемое;
	
	succes - применимо в случаях, когда найден свободный слот в хэш-таблице и значение в него помещено.
	
7.3 Имена для индексов циклов:

	В большинстве случаев я использую как раз имена i, j и им подобные. В некоторых случаях, при переборке списка я использовал имена 'element', 'item':
	for element in 'list'
	for item in 'list' 
	Если речь идет, к примеру, о переборке списка с именами сотрудников, можно использовать:
	for name in 'list'
	Или:
	for car in 'cars'
	
7.4 Имена антонимы:

	min_value - max_value
	// в случае поиска минимального и максимального значения в списке
	
	is_empty - is_full
	// указывают на заполненность списка (длина которого ограничена)
	
	attend - missing
	// присутствует требуемое значение в списке или отсутствует
	
7.5 Временные переменные:

	В основном, я именовал временные переменные как a, b, c, x, y и т.д.
	
	x - multiplicat_result
	// переменная содержит информацию о произведение (результат математического умножения)
	
	a - test_list
	// переменная содержит информацию о дополнительном списке, над которым произведена манимуляция (удаление элемента), для последующего выяснения - является ли удаленное значение суммой всех значений, оставшихся в списке. В конце каждой итерации список обнуляется, в следующей итерации, перед началом операций - элементы списка копирутся из основного списка, полученного на вход программы. В принципе, если проводить итерацию не по элементам списка, а по индексам элементов, то от этого дополнительного списка можно избавиться. Перед операцией удаляем элемент по индексу, после операции - вставляем элемент по индексу. 
	
