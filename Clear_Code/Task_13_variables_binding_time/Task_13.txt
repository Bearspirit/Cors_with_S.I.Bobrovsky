1. Максимально раннее связывание: переменная связывается со значением во время написание кода. Данный выбор оусловлен тем, что код достаточно прост. В случае необходимости, изменение значения переменной необходимо будет произвести единожды. 

def squirrel(N):
    factorial_for_nuts_number = 1
    is_positive = N >= 0
    is_integer = isinstance(N,int)
    if is_integer and is_positive:
        for i in range(1, N+1):
            factorial_for_nuts_number = i*factorial_for_nuts_number
        diamonds_amount = str(factorial_for_nuts_number)
        return int(diamonds_amount[0])
    else:
        return False
        
2. Более позднее связывание: приведен отрезок кода, в котором константам присваиваются значения выпоняемых команд. Это сделано для лучшего восприятия кода. Так же, вслучае необходимости корректировки значений команд, можно присвоить константам новые значения. 

def BastShoe(command):
    command_list = command.split(" ", maxsplit=1)

    ADD_STRING = '1'
    DELETE_SYMBOLS = '2'
    GET_SYMBOL = '3'
    MAKE_UNDO = '4'
    MAKE_REDO = '5'

    if command_list[0] == ADD_STRING: 
        if len(deleted_elements) > 0:
            deleted_elements.clear()
            del string_list[:-1]
            count_undo = 1
        elif len(deleted_elements) == 0:
            count_undo = 0
        if len(string_list) == 0:
            string_list.append(command_list[1])
            return string_list[0]
        else:
            string_list.append(string_list[-1] + command_list[1])
        return string_list[len(string_list)-1]  
        
3. Связывание во время выполнения программы. В данном примере для экземпляра класса определяются основные параметры. В случае необходимости внесения изменения в эти параметры - мы можем изменить их при инициализации экземпляра этого класса, либо, если класс импортируется в качестве модуля и его параметры заданы по умолчанию - внести изменения в эти параметры.

class Warrior:
    def __init__(self, wr_name, wr_strong, wr_int, wr_speed, wr_hp, wr_ds):
        self.name = wr_name
        self.strong = wr_strong
        self.intellect = wr_int
        self.speed = wr_speed
        self.HP = wr_hp
        self.dam_speed = wr_ds

    def get_name(self):
        return self.name

    def set_strong(self, strong):
        assert strong >= 0
        self.strong += strong

    def get_strong(self):
        return self.strong

bers = Warrior("Berserk", 100, 50, 60, 300, 90)
print(bers.get_name()) 
bers.set_strong(100)
print(bers.get_strong())
