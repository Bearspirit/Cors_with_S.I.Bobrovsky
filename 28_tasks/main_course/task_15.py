"""
Казалось бы, чего тут сложного -- выучил несколько колдовских слов, произнёс, и... никакого эффекта. 
Именно поэтому в специальных учебных заведениях наподобие Хогвартса вербальную магию изучают годами. 
Дело в том, что в волшебных учебниках написаны слова заклинания, которые сами по себе не работают. 
Их надо уметь преобразовывать в действующую магию с помощью специальных алгоритмов. Давайте познакомимся с одним из них.


У нас имеется не-магическое слово -- стандартная последовательность русских и английских букв (строковый тип). 
Такие слова в любом языке программирования можно сравнивать, используя обычный лексикографический порядок, 
когда "а" меньше чем "я", "a" меньше чем "z" и т. д.

Задача: преобразовать такое слово в магическое с помощью любого числа перестановок двух любых букв в слове, 
либо убедиться, что получить магическое слово невозможно.

Итоговое слово должно отвечать двум требованиям:
1) оно лексикографически больше, чем исходное слово;
2) оно наименьшее из всех лексикографически больших слов, которые можно получить перестановкой пары букв.

Тестовые примеры:

"ая" преобразовываем в "яа"
"fff" - невозможно преобразовать
"нклм" в "нкмл"
"вибк" в "викб"
"вкиб" в "ибвк"
Функция

string BiggerGreater(string input)
получает на вход исходную строку длиной 2 или более русских или английских строковых (маленьких) букв, 
и возвращает итоговое магическое слово. Если получить его невозможно, возвращается пустая строка.
Например, BiggerGreater("вибк") = "викб"; BiggerGreater("fff") = "".
"""

def BiggerGreater(sting):
    a = ""
    b = ""
    sting_1 = ""
    sting_2 = sting
    k = 0
    while  k <= len(sting):
        for i in range(len(sting)-1,0,-1):
                a = a + sting_2[i]
                b = b + sting_2[i-1]
                sting_1 = sting_2[:i-1] + a + b + sting_2[i+1:len(sting)]
                a = ""
                b = ""
                if sting_1 > sting:
                    return sting_1
                else:
                    sting_2 = sting_1
                    sting_1 = ""
                    k += 1
    return ""
